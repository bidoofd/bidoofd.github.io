"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
function writeWarnings(result) {
    if (!result?.warnings)
        return;
    for (const warning of result.warnings) {
        if (!warning.location) {
            console.warn(`WARN: ${warning.text}`);
        }
        else {
            const { file, line, column } = warning.location;
            const pluginText = warning.pluginName ? `[plugin: ${warning.pluginName}] ` : '';
            console.warn(`WARN: ${file}:${line}:${column}: warning: ${pluginText}${warning.text}`);
        }
    }
}
async function init() {
    const { overlay } = await Promise.resolve().then(() => __importStar(require('@jgoz/esbuild-overlay')));
    const evt = new EventSource(window.__ESBUILD_LR_PLUGIN__ + 'esbuild');
    let removeOverlay;
    evt.addEventListener('change', e => {
        const msg = JSON.parse(e?.data ?? '{}');
        writeWarnings(msg);
        const { forceReload = false, added, removed, updated } = msg;
        if (forceReload || added.length || removed.length || updated.length > 1) {
            console.log('esbuild-plugin-livereload: reloading...');
            location.reload();
            return;
        }
        if (updated.length === 1) {
            for (const link of Array.from(document.getElementsByTagName('link'))) {
                const url = new URL(link.href);
                if (url.host === location.host && url.pathname === msg.updated[0]) {
                    console.log(`esbuild-plugin-livereload: reloading CSS file ${msg.updated[0]}...`);
                    const next = link.cloneNode();
                    next.href = msg.updated[0] + '?' + Math.random().toString(36).slice(2);
                    next.onload = () => link.remove();
                    link.parentNode.insertBefore(next, link.nextSibling);
                    return;
                }
            }
            console.log('esbuild-plugin-livereload: reloading...');
            location.reload();
        }
        if (removeOverlay && !msg.errors?.length) {
            removeOverlay();
            removeOverlay = undefined;
        }
        if (msg.errors?.length) {
            removeOverlay = overlay({
                errors: msg.errors.slice(),
                openFileURL: window.__ESBUILD_LR_PLUGIN__ + 'esbuild/open-editor',
            });
        }
    });
}
init().catch(e => {
    console.error('ERROR: Unable to initialize esbuild-plugin-livereload');
    console.error(e.toString());
});
//# sourceMappingURL=event-source.js.map