"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLivereloadServer = exports.createLivereloadRequestHandler = void 0;
const fs_1 = __importDefault(require("fs"));
const http_1 = require("http");
const path_1 = __importDefault(require("path"));
const url_1 = require("url");
const openEditor = Promise.resolve().then(() => __importStar(require('open-editor')));
/**
 * Creates a request handler for http.createServer() that handles livereload requests.
 *
 * @param options - Options for the livereload server.
 * @returns - A request handler for handling livereload requests.
 */
async function createLivereloadRequestHandler(options) {
    const { port, host, onSSE, basedir, urlHostname = host } = options;
    const distFiles = await fs_1.default.promises.readdir(__dirname);
    return function handleLivereloadRequest(req, res) {
        if (!req.url)
            return false;
        const url = new url_1.URL(req.url, `http://${urlHostname}:${port}/`);
        if (url.pathname === '/esbuild') {
            onSSE(res.writeHead(200, {
                'Access-Control-Allow-Origin': '*',
                'Content-Type': 'text/event-stream',
                'Cache-Control': 'no-cache',
                'Connection': 'keep-alive',
            }));
            return true;
        }
        if (url.pathname === '/esbuild/open-editor') {
            const file = url.searchParams.get('file');
            const line = Number(url.searchParams.get('line') ?? 0);
            const column = Number(url.searchParams.get('column') ?? 0);
            if (file) {
                const absfile = path_1.default.resolve(basedir, file);
                openEditor
                    .then(({ default: open }) => open([{ file: absfile, column, line }]))
                    .catch(e => {
                    console.warn(e instanceof Error ? e.message : String(e));
                });
            }
            return true;
        }
        const sliceIndex = url.pathname.lastIndexOf('/');
        if (distFiles.includes(url.pathname.slice(sliceIndex + 1))) {
            try {
                const sourcePath = require.resolve(`.${url.pathname}`);
                res.setHeader('Access-Control-Allow-Origin', '*');
                res.setHeader('Content-Type', 'text/javascript');
                fs_1.default.createReadStream(sourcePath).pipe(res);
                return true;
            }
            catch {
                return false;
            }
        }
        return false;
    };
}
exports.createLivereloadRequestHandler = createLivereloadRequestHandler;
/**
 * Creates a livereload server.
 *
 * @param options - Options for the livereload server.
 * @returns - The server instance.
 */
async function createLivereloadServer(options) {
    const handler = await createLivereloadRequestHandler(options);
    return (0, http_1.createServer)(handler).listen(options.port, options.host);
}
exports.createLivereloadServer = createLivereloadServer;
//# sourceMappingURL=server.js.map